//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 ColorKeyHigh;
//   float4 ColorKeyLow;
//   sampler2D TextureSampler;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   ColorKeyLow    c0       1
//   ColorKeyHigh   c1       1
//   TextureSampler s0       1
//

/*
    ps_2_0
    def c2, 1, 0, 0, 0
    dcl t0.xy
    dcl_2d s0
    texld r0, t0, s0
    add r1.xyz, r0, -c0
    cmp r1.xyz, r1, c2.x, c2.y
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    add r1.yzw, -r0.wzyx, c1.wzyx
    cmp r1.yzw, r1, c2.x, c2.y
    mul r1.z, r1.z, r1.w
    mul r1.y, r1.y, r1.z
    mul r1.x, r1.y, r1.x
    mov r1, -r1.x
    texkill r1
    mov oC0, r0
*/

// approximately 13 instruction slots used (1 texture, 12 arithmetic)

// fxc.exe /Tps_2_0 shader.hlsl /Fhshader.h
/*
sampler2D TextureSampler : register(s0); // Declare the sampler
float4 ColorKeyLow : register(c0);       // Declare the color key low constant
float4 ColorKeyHigh : register(c1);      // Declare the color key high constant

float4 ColorKeyRangeShader(float4 position : POSITION0, float2 texcoord : TEXCOORD0, float4 color : COLOR0) : COLOR
{
	// Sample the texture
	float4 texColor = tex2D(TextureSampler, texcoord);

	// Check if the texel color is within the color key range
	if (all(texColor.rgb >= ColorKeyLow.rgb) && all(texColor.rgb <= ColorKeyHigh.rgb))
	{
	    // Discard pixels within the color key range
	    discard;
	}

	// Output the texture color
	return texColor;
}
*/

const BYTE ColorKeyPixelShaderSrc[] =
{
      0x00, 0x02, 0xFF, 0xFF, 0xFE, 0xFF,
      0x36, 0x00, 0x43, 0x54, 0x41, 0x42,
      0x1C, 0x00, 0x00, 0x00, 0xAB, 0x00,
      0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF,
      0x03, 0x00, 0x00, 0x00, 0x1C, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
      0xA4, 0x00, 0x00, 0x00, 0x58, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x01, 0x00,
      0x01, 0x00, 0x06, 0x00, 0x68, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x78, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x02, 0x00,
      0x68, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x84, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x02, 0x00, 0x94, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x43, 0x6F,
      0x6C, 0x6F, 0x72, 0x4B, 0x65, 0x79,
      0x48, 0x69, 0x67, 0x68, 0x00, 0xAB,
      0xAB, 0xAB, 0x01, 0x00, 0x03, 0x00,
      0x01, 0x00, 0x04, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4B,
      0x65, 0x79, 0x4C, 0x6F, 0x77, 0x00,
      0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
      0x65, 0x53, 0x61, 0x6D, 0x70, 0x6C,
      0x65, 0x72, 0x00, 0xAB, 0x04, 0x00,
      0x0C, 0x00, 0x01, 0x00, 0x01, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x70, 0x73, 0x5F, 0x32,
      0x5F, 0x30, 0x00, 0x4D, 0x69, 0x63,
      0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74,
      0x20, 0x28, 0x52, 0x29, 0x20, 0x48,
      0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68,
      0x61, 0x64, 0x65, 0x72, 0x20, 0x43,
      0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65,
      0x72, 0x20, 0x31, 0x30, 0x2E, 0x31,
      0x00, 0xAB, 0x51, 0x00, 0x00, 0x05,
      0x02, 0x00, 0x0F, 0xA0, 0x00, 0x00,
      0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x1F, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
      0x03, 0xB0, 0x1F, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x90, 0x00, 0x08,
      0x0F, 0xA0, 0x42, 0x00, 0x00, 0x03,
      0x00, 0x00, 0x0F, 0x80, 0x00, 0x00,
      0xE4, 0xB0, 0x00, 0x08, 0xE4, 0xA0,
      0x02, 0x00, 0x00, 0x03, 0x01, 0x00,
      0x07, 0x80, 0x00, 0x00, 0xE4, 0x80,
      0x00, 0x00, 0xE4, 0xA1, 0x58, 0x00,
      0x00, 0x04, 0x01, 0x00, 0x07, 0x80,
      0x01, 0x00, 0xE4, 0x80, 0x02, 0x00,
      0x00, 0xA0, 0x02, 0x00, 0x55, 0xA0,
      0x05, 0x00, 0x00, 0x03, 0x01, 0x00,
      0x01, 0x80, 0x01, 0x00, 0x55, 0x80,
      0x01, 0x00, 0x00, 0x80, 0x05, 0x00,
      0x00, 0x03, 0x01, 0x00, 0x01, 0x80,
      0x01, 0x00, 0xAA, 0x80, 0x01, 0x00,
      0x00, 0x80, 0x02, 0x00, 0x00, 0x03,
      0x01, 0x00, 0x0E, 0x80, 0x00, 0x00,
      0x1B, 0x81, 0x01, 0x00, 0x1B, 0xA0,
      0x58, 0x00, 0x00, 0x04, 0x01, 0x00,
      0x0E, 0x80, 0x01, 0x00, 0xE4, 0x80,
      0x02, 0x00, 0x00, 0xA0, 0x02, 0x00,
      0x55, 0xA0, 0x05, 0x00, 0x00, 0x03,
      0x01, 0x00, 0x04, 0x80, 0x01, 0x00,
      0xAA, 0x80, 0x01, 0x00, 0xFF, 0x80,
      0x05, 0x00, 0x00, 0x03, 0x01, 0x00,
      0x02, 0x80, 0x01, 0x00, 0x55, 0x80,
      0x01, 0x00, 0xAA, 0x80, 0x05, 0x00,
      0x00, 0x03, 0x01, 0x00, 0x01, 0x80,
      0x01, 0x00, 0x55, 0x80, 0x01, 0x00,
      0x00, 0x80, 0x01, 0x00, 0x00, 0x02,
      0x01, 0x00, 0x0F, 0x80, 0x01, 0x00,
      0x00, 0x81, 0x41, 0x00, 0x00, 0x01,
      0x01, 0x00, 0x0F, 0x80, 0x01, 0x00,
      0x00, 0x02, 0x00, 0x08, 0x0F, 0x80,
      0x00, 0x00, 0xE4, 0x80, 0xFF, 0xFF,
      0x00, 0x00
};
